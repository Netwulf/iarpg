generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  username         String    @unique
  passwordHash     String?
  tier             String    @default("free") // free, premium, master
  stripeCustomerId String?   @unique
  avatar           String?
  bio              String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  characters       Character[]
  ownedTables      Table[]         @relation("TableOwner")
  tableMemberships TableMember[]
  messages         Message[]
  aiUsages         AIUsage[]
  asyncTurns       AsyncTurn[]

  @@index([email])
  @@index([username])
}

model Character {
  id              String   @id @default(cuid())
  userId          String
  name            String
  race            String
  class           String
  level           Int      @default(1)

  // Ability Scores
  strength        Int
  dexterity       Int
  constitution    Int
  intelligence    Int
  wisdom          Int
  charisma        Int

  // Core Stats
  proficiencyBonus Int     @default(2)
  hp              Int
  maxHp           Int
  tempHp          Int      @default(0)
  ac              Int
  initiative      Int
  speed           Int      @default(30)

  // Skills & Proficiencies (JSON array of strings)
  proficiencies   Json     @default("[]")

  // Spells (JSON array of Spell objects)
  spells          Json     @default("[]")

  // Equipment (JSON array of EquipmentItem objects)
  equipment       Json     @default("[]")

  // Character Details
  background      String
  notes           String?
  avatarUrl       String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tableMemberships TableMember[]
  messages        Message[]

  @@index([userId])
}

model Table {
  id              String   @id @default(cuid())
  ownerId         String
  name            String
  description     String
  playStyle       String   // sync, async, solo
  privacy         String   @default("private") // private, public, spectator
  inviteCode      String   @unique
  state           String   @default("setup") // setup, active, paused, completed
  schedule        String?
  maxPlayers      Int      @default(6)
  tags            String[] // Array of strings
  rulesVariant    String   @default("standard") // standard, homebrew
  thumbnailUrl    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastActivityAt  DateTime @default(now())

  // Async Play Mode fields (Story 7.1)
  turnDeadlineHours Int?    // 24, 48, 72, 168 (null for sync tables)
  currentTurnIndex  Int     @default(0)
  turnOrder         Json    @default("[]") // Array of userIds in turn order

  // Relations
  owner           User            @relation("TableOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members         TableMember[]
  messages        Message[]
  combatEncounters CombatEncounter[]
  aiUsages        AIUsage[]
  asyncTurns      AsyncTurn[]

  @@index([ownerId])
  @@index([privacy, state]) // For public table discovery
  @@index([inviteCode])
}

model TableMember {
  id          String   @id @default(cuid())
  tableId     String
  userId      String
  characterId String
  role        String   @default("player") // dm, player
  status      String   @default("active") // active, invited, left
  joinedAt    DateTime @default(now())

  // Relations
  table       Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([tableId, userId]) // User can only join table once
  @@index([tableId])
  @@index([userId])
}

model Message {
  id          String   @id @default(cuid())
  tableId     String
  userId      String
  characterId String?  // Null for OOC messages
  type        String   // ic, ooc, dm-note, system
  content     String   @db.Text

  // Embedded data (JSON)
  diceRolls   Json     @default("[]") // Array of DiceRoll objects
  reactions   Json     @default("[]") // Array of Reaction objects

  parentId    String?  // For threading (async play)
  asyncTurnId String?  // Track which async turn this message belongs to (Story 7.1)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  table       Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  character   Character? @relation(fields: [characterId], references: [id], onDelete: SetNull)
  parent      Message?   @relation("MessageThread", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Message[]  @relation("MessageThread")
  asyncTurn   AsyncTurn? @relation(fields: [asyncTurnId], references: [id], onDelete: SetNull)

  @@index([tableId, createdAt]) // For message history pagination
  @@index([parentId])
  @@index([asyncTurnId])
}

model CombatEncounter {
  id          String   @id @default(cuid())
  tableId     String
  name        String   @default("Combat")
  round       Int      @default(1)
  currentTurn Int      @default(0)
  state       String   @default("active") // setup, active, ended

  // Combatants (JSON array of Combatant objects)
  // Each combatant: { id, characterId?, name, initiative, hp, maxHp, isNPC, position }
  combatants  Json     @default("[]")

  createdAt   DateTime @default(now())
  endedAt     DateTime?

  // Relations
  table       Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId, state])
}

model AIUsage {
  id         String   @id @default(cuid())
  userId     String
  tableId    String?
  prompt     String   @db.Text
  response   String   @db.Text
  tokensUsed Int
  cost       Float    // In dollars
  createdAt  DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  table Table? @relation(fields: [tableId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([tableId])
}

model AsyncTurn {
  id        String    @id @default(cuid())
  tableId   String
  userId    String
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  deadline  DateTime  // Calculated: startedAt + table.turnDeadlineHours
  skipped   Boolean   @default(false) // True if auto-skipped due to deadline

  // Relations
  table     Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([tableId, startedAt])
  @@index([deadline]) // For deadline checker job
}
